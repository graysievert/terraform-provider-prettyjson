# Terraform PrettyJSON Provider - Product Requirements Document

## Overview
The PrettyJSON provider is a minimal Terraform provider that addresses the lack
of built-in JSON pretty-printing capabilities in Terraform. This provider 
implements a single provider-defined function that transforms JSON strings into
human-readable, formatted output using Go's standard library functions. The 
provider requires no external API interactions and operates entirely through 
local computation.

**Problem Statement:** Terraform lacks native JSON pretty-printing 
functionality, forcing users to rely on external tools or complex workarounds.
Existing solutions using data resources are inelegant and don't align with 
modern Terraform best practices.

**Solution:** A lightweight provider that leverages Terraform's provider-defined
functions capability to offer clean, integrated JSON formatting.

**Target Users:** Terraform practitioners who need to format JSON output for 
debugging, documentation, or human consumption.

## Core Features

### Primary Feature: jsonprettyprint Function
**Functionality:** Accepts a JSON string and returns a formatted, human-readable
version with configurable indentation.

**Function Signature:** 
`provider::prettyjson::jsonprettyprint(json_string, indentation_type)`

**Parameters:**
- `json_string` (required): Any valid JSON string input
- `indentation_type` (optional): String literal controlling formatting
  - Default: "2spaces" 
  - Supported values: "2spaces", "4spaces", "tab"

**Return Value:** Formatted JSON string with proper indentation and line breaks

**Why This Feature:** 
- Solves the core problem of JSON readability in Terraform outputs
- Integrates seamlessly with Terraform's native functions like `jsonencode()`
- Provides consistent formatting across different environments

**High-Level Implementation:**
- Uses Go's `json.Marshal` and `json.MarshalIndent` functions
- Validates JSON input before processing
- Applies indentation based on parameter selection
- Returns formatted string or error

## User Experience

### User Personas
**Primary User:** Infrastructure Engineers and DevOps practitioners who:
- Work with complex Terraform configurations
- Need to debug JSON structures in their infrastructure code
- Generate human-readable outputs for documentation or review processes

### Key User Flows

**Basic Usage Flow:**
1. User adds `prettyjson` provider to their Terraform configuration
2. User calls function with JSON string: 
   `provider::prettyjson::jsonprettyprint(jsonencode(local.my_data))`
3. Function returns formatted JSON for use in outputs, local files, or other 
   resources

**Advanced Usage Flow:**
1. User specifies custom indentation: 
   `provider::prettyjson::jsonprettyprint(jsonencode(var.config), "4spaces")`
2. User combines with `local_file` resource to generate readable configuration 
   files
3. User incorporates into output values for debugging complex data structures

**Error Handling Flow:**
1. User provides invalid JSON string
2. Provider returns clear error message including Go's JSON parsing details
3. User corrects input and retries

### UI/UX Considerations
- **No UI Required:** Function operates entirely through Terraform HCL syntax
- **Error Messages:** Must be clear and actionable for debugging
- **Documentation:** Should include practical examples that users can copy-paste

## Technical Architecture

### System Components
**Provider Structure:**
- `internal/provider/provider.go`: Main provider configuration (schema-only, 
  no resources/data sources)
- `internal/provider/jsonprettyprint_function.go`: Core function implementation
- `internal/provider/jsonprettyprint_function_test.go`: Comprehensive test suite

**Function Implementation:**
- Input validation using Go's `json.Valid()` function
- JSON parsing with `json.Unmarshal()` for structure validation
- Pretty-printing with `json.MarshalIndent()` using configurable parameters
- Error wrapping with Terraform-specific error types

### Data Models
**Function Schema:**
```go
// Input parameters
type JsonPrettyPrintRequest struct {
    JsonString     string // Required JSON input
    IndentationType string // Optional: "2spaces", "4spaces", "tab"
}

// Indentation mapping
var indentMap = map[string]string{
    "2spaces": "  ",
    "4spaces": "    ", 
    "tab": "\t",
}
```

**Error Handling:**
- Wrap Go JSON errors with Terraform function diagnostics
- Preserve original error context for debugging
- Return structured error responses

### APIs and Integrations
**No External APIs:** Provider operates entirely through local computation 
using Go standard library.

**Terraform Integration:**
- Implements Terraform Plugin Framework function interface
- Registers single function in provider schema
- Compatible with Terraform 1.8+ provider-defined functions

### Infrastructure Requirements
**Development Environment:**
- Go 1.21+ (as specified in scaffolding framework)
- Terraform 1.8+ for testing
- Standard Go testing tools

**Runtime Requirements:**
- No external dependencies beyond Go standard library
- No network access required
- Compatible with all Terraform-supported platforms

## Development Roadmap

### Phase 1: MVP Implementation
**Core Function Development:**
- Implement basic `jsonprettyprint` function with default 2-space indentation
- Add input validation and error handling
- Create minimal test suite covering valid/invalid JSON inputs
- Clean up scaffolding framework (remove unused data source/resource examples)

**Provider Setup:**
- Configure provider schema with single function
- Update provider metadata (name, description)
- Ensure configuration-free operation

**Basic Testing:**
- Unit tests for function logic
- Integration tests with sample Terraform configurations
- Error case validation

### Phase 2: Enhanced Functionality
**Indentation Options:**
- Implement configurable indentation parameter
- Add support for "2spaces", "4spaces", "tab" options
- Update function signature and validation

**Comprehensive Testing:**
- Complex JSON test cases (nested objects, arrays, mixed types)
- Edge case testing (empty strings, large objects)
- Performance testing with various input sizes

**Example Implementation:**
- Create `example.tf` with `local_file` resource demonstration
- Test with complex nested data structures
- Validate output formatting across different indentation types

### Phase 3: Documentation and Publishing Preparation
**Documentation:**
- Complete provider documentation following HashiCorp standards
- Function reference documentation with examples
- README updates with installation and usage instructions

**Registry Preparation:**
- Verify compliance with Terraform Registry requirements
- Prepare provider metadata and descriptions
- Ensure proper licensing and attribution

**CI/CD Validation:**
- Verify existing GitHub Actions workflows
- Test cross-platform compatibility
- Validate release process

## Logical Dependency Chain

### Foundation Phase (Must Complete First):
1. **Scaffolding Cleanup:** Remove unused data source, resource, and ephemeral
   resource files
2. **Provider Schema Setup:** Configure provider to register only the function
   (no resources/data sources)
3. **Core Function Structure:** Implement basic function skeleton with proper 
   Terraform Plugin Framework integration

### Rapid Usability Phase (Get to Working Demo):
4. **Basic JSON Processing:** Implement core JSON validation and pretty-printing
   with default indentation
5. **Error Handling:** Add proper error wrapping and Terraform-compatible error
   responses
6. **Simple Test:** Create basic unit test to verify function works with valid 
   JSON input

### Feature Completion Phase (Build Upon Foundation):
7. **Indentation Options:** Add configurable indentation parameter and 
   validation
8. **Comprehensive Testing:** Expand test suite to cover all indentation options
   and edge cases
9. **Integration Example:** Create `example.tf` demonstrating real-world usage 
   with `local_file`

### Publishing Preparation Phase (Final Polish):
10. **Documentation:** Complete all required documentation for Terraform 
    Registry submission
11. **Cross-Platform Testing:** Verify functionality across different operating
    systems
12. **Registry Compliance:** Final validation against HashiCorp publishing 
    requirements

## Risks and Mitigations

### Technical Challenges
**Risk:** Complex JSON structures causing performance issues with large inputs
**Mitigation:** Leverage Go's efficient JSON library; implement reasonable input
size testing; document any practical limitations discovered during testing

**Risk:** Indentation parameter validation complexity
**Mitigation:** Use simple string matching against predefined options; clear 
error messages for invalid parameters

### MVP Scoping
**Risk:** Over-engineering the solution with unnecessary features
**Mitigation:** Focus strictly on the single function requirement; resist 
adding multiple functions or complex configuration options

**Risk:** Terraform Plugin Framework integration complexity
**Mitigation:** Follow existing scaffolding examples closely; reference 
HashiCorp documentation; test incrementally

### Resource Constraints
**Risk:** Unfamiliarity with Terraform provider development
**Mitigation:** Leverage existing scaffolding examples; use provided test files
as templates; focus on minimal viable implementation first

**Risk:** Registry publishing requirements complexity
**Mitigation:** Follow HashiCorp's official guides; use scaffolding framework 
which is designed for registry compatibility; validate requirements early in 
development

## Appendix

### Technical Specifications
**Go Version:** 1.21+ (as required by terraform-provider-scaffolding-framework)
**Terraform Version:** 1.8+ (required for provider-defined functions)
**Plugin Framework:** terraform-plugin-framework (latest stable)

### Key Files Reference
**Implementation Files:**
- `internal/provider/provider.go` - Main provider configuration
- `internal/provider/jsonprettyprint_function.go` - Function implementation
- `internal/provider/jsonprettyprint_function_test.go` - Test suite

**Documentation Files:**
- `docs/index.md` - Provider documentation
- `docs/functions/jsonprettyprint.md` - Function reference
- `README.md` - Installation and usage guide

**Example Files:**
- `examples/` - Directory with example Terraform configurations
- `example.tf` - Demonstration with local_file resource

### Terraform Registry Requirements Reference
- Provider must include proper metadata and descriptions
- Documentation must follow HashiCorp formatting standards
- Must support multiple operating systems and architectures
- Requires proper semantic versioning and release process
- Must include examples and comprehensive documentation